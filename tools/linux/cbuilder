#!/bin/bash

if (( $# == 0 )); then
    echo -e  "cbuilder.sh - Cinder for Linux wrapper script"
    echo -e "usage examples:"
    echo -e "\tcbuilder.sh -j 4 -b Debug"
    echo -e "\tcbuilder.sh clean -b Debug"
    echo -e ""
    echo -e "options:"
	echo -e "\tclean    Cleans the build for specified build type"
    echo -e "\t-b [str] Build type, ex: -b Debug,Release "
    echo -e "\t-j [n]   Number of compile processes, ex: -j 4"
    echo -e ""
    echo -e "flags:"
    echo -e "\t-rpi2    Build for Raspberry Pi 2 (must be on platform)"
    echo -e "\t-tk1     Build for NVidia Jetson TK1 (must be on platform)"
    echo -e "\t-xu4     Build for Odroid XU4 (must be on platform)"
    #echo -e "\t-r      Rebuild instead of full build"
    #echo -e "\t-v      Turns on verbose mode"
    #echo -e ""
    exit 0
fi


SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

CLEAN=
BUILDTYPES=(Debug)
NUMPROCS=4

# Process arguments
while (( $# >= 1 ))
do
	arg=$1

	case $arg in
		# Clean
		clean)
			CLEAN=1
		;;

        # Build types
        -b)
            # Clear array
            BUILDTYPES=()            
            # Split string into tokens
            tokens=(${2//,/ })
            # Parse build types
            for tok in ${tokens[@]}; do
                build=$(echo $tok | tr '[:upper:]' '[:lower:]')
                case $build in
                    debug)
                        BUILDTYPES+=(Debug) 
                    ;;

                    release)
                        BUILDTYPES+=(Release)
                    ;;

                    *)
                        echo "-b Unknown build type: $build"
                        exit 1
                    ;;
                esac
            done
        ;;

        # Number of build processes
        -j)
            # Make sure this is a number
            if [[ $2 = *[[:digit:]]* ]]; then
                NUMPROCS=$2
            else
                echo "-j requires a number"
                exit 1
            fi
        ;;
	esac

    # Shift
    if [[ ${2:0:1} == '-' ]] || [ -z "$2" ]; then
        shift 1
    else
        shift 2
    fi
done

for build in ${BUILDTYPES[@]}; do
	build_type=${build}
	build_dir=$SCRIPT_DIR/../../linux/${build}

	if [ -n "${CLEAN}" ]; then
		echo "Cleaning ${build_type} ..."
		if [ -d "${build_dir}" ]; then
			rm -rf "${build_dir}"
			echo "...deleted dir: ${build_dir}"
		fi
	else
		if [ ! -f "${SCRIPT_DIR}/../../linux/CMakeLists.txt" ]; then
			echo "ERROR: Couldn't find CMakeLists.txt in ${SCRIPT_DIR}/../../linux"
			exit
		fi

		echo "---------------------------------------------------------------------------------"
		echo "Building Cinder in ${build_type} mode"

		if [ ! -d "${build_dir}" ]; then
			mkdir ${build_dir}
			echo "...created dir: ${build_dir}"
		fi

		cd ${build_dir}
		cmake .. -DCMAKE_BUILD_TYPE=${build_type}
		make -j ${NUMPROCS} VERBOSE=1

		echo -e ""
	fi
done

#if [ ! -f "./CMakeLists.txt" ]; then
#	echo "ERROR: Couldn't find CMakeLists.txt in current directory!"
#	exit
#fi
#
#BUILD_TYPE=Debug
#BUILD_DIR=Debug
#if [ ! -d "./${BUILD_DIR}" ]; then
#	mkdir ./${BUILD_DIR}
#	echo "Created ${BUILD_DIR} directory"
#fi
#
#cd ${BUILD_DIR}
#cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
#make VERBOSE=1
