#!/bin/bash

function print_help()
{
    echo -e  "cibuilder.sh - Cinder for Linux wrapper script"
    echo -e "usage examples:"
    echo -e "\tcibuilder.sh -j 4 -b Debug"
    echo -e "\tcibuilder.sh clean -b Debug"
    echo -e ""
    echo -e "options:"
	echo -e "\tclean    Cleans the build for specified build type"
    echo -e "\t-b [str] Build type, ex: -b Debug,Release "
    echo -e "\t-j [n]   Number of compile processes, ex: -j 4"
    echo -e ""
    echo -e "flags:"
	echo -e "\t-es2     Build for OpenGL ES 2.0 instead of Desktop OpenGL"
	echo -e "\t-es3     Build for OpenGL ES 3.0 instead of Desktop OpenGL"
	echo -e "\t-es31    Build for OpenGL ES 3.1 instead of Desktop OpenGL"
	echo -e "\t-es32    Build for OpenGL ES 3.2 instead of Desktop OpenGL"
    echo -e "\t-rpi2    Build for Raspberry Pi 2 (must be on platform)"
    echo -e "\t-r       Rebuild instead of full build"
    echo -e "\t-v       Turns on verbose mode"
	echo -e ""
	echo -e "\t-rpi2-sysroot [str]          Path to Raspberry Pi 2 sysroot"
	echo -e "\t-rpi2-toolchain-root [str]   Path to Raspberry Pi 2 toolchain root"
	echo -e "\t-rpi2-toolchain-name [str]   Raspberry Pi 2 toolchain name"
    echo -e ""
}

if [ $# == 0 ]; then
	print_help
    exit 0
fi


#SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
SCRIPT_DIR=$( pwd )
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

CLEAN=false
BUILD_TYPES=(Debug)
NUMPROCS=$( nproc )
GLES=
OPENGL_PLAT="ogl"
CINDER_OUT_DIR_PREFIX="-DCINDER_OUT_DIR_PREFIX:STRING=ogl"
CINDER_LIB_SUFFIX="-DCINDER_LIB_SUFFIX:STRING="
FULLBUILD=true
RPI2=
RPI2_CROSS_COMPILE=false
RPI2_SYSROOT=
RPI2_TOOLCHAIN_ROOT=
RPI2_TOOLCHAIN_NAME="-DCINDER_RPI2_TOOLCHAIN_NAME=arm-unknown-linux-gnueabihf"
VERBOSE=
APP_BUILD=false
SAMPLES=
GCC=

_CORE_COUNT=$(getconf _NPROCESSORS_CONF)
if [ "$_CORE_COUNT" -gt "$NUMPROCS" ]; then
	NUMPROCS=$_CORE_COUNT
fi


_CORE_COUNT=$(getconf _NPROCESSORS_CONF)
if [ "$_CORE_COUNT" -gt "$NUMPROCS" ]; then
	NUMPROCS=$_CORE_COUNT
fi


# Process arguments
while (( $# >= 1 ))
do
	arg=$1

	case $arg in
		# Clean
		clean)
			CLEAN=true
			shift 1
		;;

        # Build types
        -b)
            # Clear array
            BUILD_TYPES=()            
            # Split string into tokens
            tokens=(${2//,/ })
            # Parse build types
            for tok in ${tokens[@]}; do
                build=$(echo $tok | tr '[:upper:]' '[:lower:]')
                case $build in
                    debug)
                        BUILD_TYPES+=(Debug) 
                    ;;

                    release)
                        BUILD_TYPES+=(Release)
                    ;;

                    *)
                        echo "-b Unknown build type: $build"
                        exit 1
                    ;;
                esac
            done
			shift 2
        ;;

        # Number of build processes
        -j)
            # Make sure this is a number
            if [[ $2 = *[[:digit:]]* ]]; then
                NUMPROCS=$2
            else
                echo "-j requires a number"
                exit 1
            fi
			shift 2
        ;;

        # OpenGL ES 2.0
        -es2)
            GLES="-DCINDER_GL_ES_2=1"
			OPENGL_PLAT="es2"
            CINDER_OUT_DIR_PREFIX="-DCINDER_OUT_DIR_PREFIX:STRING=es2"
            CINDER_LIB_SUFFIX="-DCINDER_LIB_SUFFIX:STRING=-es2"
			shift 1
        ;;

        # OpenGL ES 3.0
        -es3)
            GLES="-DCINDER_GL_ES_3=1"
			OPENGL_PLAT="es3"
            CINDER_OUT_DIR_PREFIX="-DCINDER_OUT_DIR_PREFIX:STRING=es3"
            CINDER_LIB_SUFFIX="-DCINDER_LIB_SUFFIX:STRING=-es3"
			shift 1
        ;;

        # OpenGL ES 3.1
        -es31)
            GLES="-DCINDER_GL_ES_3_1=1"
			OPENGL_PLAT="es31"
            CINDER_OUT_DIR_PREFIX="-DCINDER_OUT_DIR_PREFIX:STRING=es31"
            CINDER_LIB_SUFFIX="-DCINDER_LIB_SUFFIX:STRING=-es31"
			shift 1
        ;;

        # OpenGL ES 3.2
        -es32)
            GLES="-DCINDER_GL_ES_3_2=1"
			OPENGL_PLAT="es32"
            CINDER_OUT_DIR_PREFIX="-DCINDER_OUT_DIR_PREFIX:STRING=es32"
            CINDER_LIB_SUFFIX="-DCINDER_LIB_SUFFIX:STRING=-es32"
			shift 1
        ;;

		# Raspberry Pi 2
		-rpi2)
			RPI2="-DCINDER_LINUX_EGL_RPI2=1"
			GLES="-DCINDER_GL_ES_2=1"
            CINDER_OUT_DIR_PREFIX="-DCINDER_OUT_DIR_PREFIX:STRING=es2-rpi2"
            CINDER_LIB_SUFFIX="-DCINDER_LIB_SUFFIX:STRING=-es2"
			OPENGL_PLAT="es2-rpi2"
			shift 1
		;;

		# Rapsberry Pi 2 virtual system root
		-rpi2-sysroot)
			RPI2_SYSROOT="-DCINDER_RPI2_SYSROOT=$2"
			shift 2
		;;

		# Raspberry Pi 2 toolchain root
		-rpi2-toolchain-root)
			RPI2_TOOLCHAIN_ROOT="-DCINDER_RPI2_TOOLCHAIN_ROOT=$2"
			shift 2
		;;

		# Raspberry Pi 2 toolchain name
		-rpi2-toolchain-name)
			RPI2_TOOLCHAIN_NAME="-DCINDER_RPI2_TOOLCHAIN_NAME=$2"
			shift 2
		;;

        # Rebuild
        -r)
			FULLBUILD=false
			shift 1
        ;;

		# Verbose
		-v)
			VERBOSE="VERBOSE=1"
			shift 1
		;;

		# Dummy arg so samples (or apps) can build without a flag
		-app)
			echo "Building a app..."
			APP_BUILD=true
			shift 1
		;;
	
		# Build samples
		-samples)
			SAMPLES="-DCINDER_BUILD_SAMPLES=1"
			shift 1
		;;

		# GCC
		-gcc)
			GCC="-DCINDER_TOOLCHAIN_GCC=1"
			shift
		;;

		# Help
		-h|-help)
			print_help
			exit 0
		;;

		?*)
			echo "Unknown parameter: ${arg}"
			exit 1
		;;
	esac
done

if [ ! -z "${RPI2_SYSROOT}" ] && [ ! -z "${RPI2_TOOLCHAIN_ROOT}" ]; then
	if [ -z "${RPI2_TOOLCHAIN_NAME}" ]; then
		echo "ERROR: Missing RPI2_TOOLCHAIN_NAME can't be empty"
		exit 1
	fi

	# If -rpi2 wasn't specified - it should be implied
	if [ -z "${RPI2}" ]; then
		RPI2="-DCINDER_LINUX_EGL_RPI2=1"
		GLES="-DCINDER_GL_ES_2=1"
		CINDER_OUT_DIR_PREFIX="-DCINDER_OUT_DIR_PREFIX:STRING=es2-rpi2"
		CINDER_LIB_SUFFIX="-DCINDER_LIB_SUFFIX:STRING=-es2"
		OPENGL_PLAT="es2-rpi2"			
	fi

	RPI2_CROSS_COMPILE=true
fi

if [ ! -z "${RPI2}" ] && [ ${RPI2_CROSS_COMPILE} == true ]; then
	if [ ! -z "${GCC}" ] && [ "${NUMPROCS}" -ge "4" ]; then
		NUMPROCS=3
	fi
fi

for build in ${BUILD_TYPES[@]}; do
	build_type=${build}
	build_dir=$(pwd)/${build}/${OPENGL_PLAT}

	if [ ${APP_BUILD} == true ]; then
		build_dir=$(pwd)/${build}/${OPENGL_PLAT}
	else
		build_dir=${SCRIPT_DIR}/../../linux/${build}/${OPENGL_PLAT}
	fi

	# Clean
	if [ ${CLEAN} == true ] || [ ${FULLBUILD} == true ]; then
		echo "Cleaning ${build_type} ..."
		if [ -d "${build_dir}" ]; then
			rm -rf "${build_dir}"
			echo "...deleted dir: ${build_dir}"
		fi

		if [ ${CLEAN} == true ]; then
			exit 0
		fi
	fi

	# Check for CMakeLists.txt
	cmake_file_path="${SCRIPT_DIR}/../../linux/CMakeLists.txt"
	if [ ${APP_BUILD} == true ]; then
		cmake_file_path="$(pwd)/CMakeLists.txt"
	fi

	if [ ! -f "${cmake_file_path}" ]; then
		echo "ERROR: Couldn't find CMakeLists.txt in $(cmake_file_path)"
		exit
	fi

	# Build
	echo "---------------------------------------------------------------------------------"
	echo "Building Cinder in ${build_type} mode with ${NUMPROCS} compile processes"

	if [ ! -d "${build_dir}" ]; then
		mkdir -p ${build_dir}
		echo "...created dir: ${build_dir}"
	fi

	cd ${build_dir}
	if [ ${FULLBUILD} == true ] || [ ! -f "${build_dir}/CMakeCache.txt" ]; then
		if [ ${RPI2_CROSS_COMPILE} == true ]; then
			echo "CMAKE COMMAND: cmake ../.. -DCMAKE_BUILD_TYPE=${build_type} ${GCC} ${GLES} ${RPI2} ${SAMPLES} ${CINDER_OUT_DIR_PREFIX} ${CINDER_LIB_SUFFIX} ${RPI2_SYSROOT} ${RPI2_TOOLCHAIN_ROOT} ${RPI2_TOOLCHAIN_NAME}"
			cmake ../.. --no-warn-unused-cli -DCMAKE_BUILD_TYPE=${build_type} ${GCC} ${GLES} ${RPI2} ${SAMPLES} ${CINDER_OUT_DIR_PREFIX} ${CINDER_LIB_SUFFIX} ${RPI2_SYSROOT} ${RPI2_TOOLCHAIN_ROOT} ${RPI2_TOOLCHAIN_NAME}
		else 
			echo "CMAKE COMMAND: cmake ../.. -DCMAKE_BUILD_TYPE=${build_type} ${GCC} ${GLES} ${RPI2} ${SAMPLES} ${CINDER_OUT_DIR_PREFIX} ${CINDER_LIB_SUFFIX}"
			cmake ../.. --no-warn-unused-cli -DCMAKE_BUILD_TYPE=${build_type} ${GCC} ${GLES} ${RPI2} ${SAMPLES} ${CINDER_OUT_DIR_PREFIX} ${CINDER_LIB_SUFFIX}
		fi
	fi
	make -j ${NUMPROCS} ${VERBOSE}

	echo -e ""
done
